给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。



示例 1:


输入: "abcabcbb"

输出: 3 

解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。


示例 2:


输入: "bbbbb"

输出: 1

解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。


示例 3:


输入: "pwwkew"

输出: 3

解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     
请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。




解题思路：滑动窗口，利用hash保存字符出现的下标，左右两个指针，右指针每次正常+1，判断新出现的字符是否在hash表已经出现，若出现，左指针指向这个字符上一次出现的位置。

class Solution {
    public int lengthOfLongestSubstring(String s) {
    	int alphabet[]=new int[200];//保存字符出现的位置下标
    	char list[]=s.toCharArray();
    	int max=0;
    	int count=0;
    	int last=0;
    	for(int i=0;i<list.length;i++){
    		int index=list[i]-0;
    		if(alphabet[index]==0){//字符第一次出现
    			alphabet[index]=i+1;
    			count=i+1-last;
    			if(count>max){
    				max=count;
    			}
    		}else{//字符重复出现
    			
    			if(alphabet[index]<last){
    				count=i+1-last;
    			}else{
    				count=i+1-alphabet[index];
    			}
    			if(count>max){
    				max=count;
    			}
    			if(last<alphabet[index])
    				last=alphabet[index];
    			alphabet[index]=i+1;
    		}
    	}
    	
    	return max;
    }
}
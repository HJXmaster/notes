给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。

示例 1:


输入: coins = [1, 2, 5], amount = 11

输出: 3 

解释: 11 = 5 + 5 + 1


示例 2:


输入: coins = [2], amount = 3

输出: -1



/**
解题思路:
	动态规划，自底向上的方法。
count(amount)=Min(count(amount-coins[1])+1,count(amount-coins[2])+1,......)
即依次寻找一个硬币个数组合最少的金额，使得该金额+硬币面值=总金额amount
*/
class Solution {
    public int coinChange(int[] coins, int amount) {
    	if(amount==0)return 0;
    	int dp[]=new int[amount+1];
    	for(int i=0;i<coins.length;i++){
    		int cost=coins[i];
    		if(cost<=amount){
    			dp[cost]=1;
    		}
    		for(int j=cost;j<=amount;j++){
    			if(dp[j-cost]==0){
    				continue;
    			}else if(dp[j]==0){
    				dp[j]=dp[j-cost]+1;
    			}else if(dp[j]!=0&&(dp[j-cost]+1)<dp[j])
    				dp[j]=dp[j-cost]+1;
    		}
    	}
    	return dp[amount]==0?-1:dp[amount];
    }
}
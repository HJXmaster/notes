    总共有 n 个人和 40 种不同的帽子，帽子编号从 1 到 40 。

给你一个整数列表的列表 hats ，其中 hats[i] 是第 i 个人所有喜欢帽子的列表。

请你给每个人安排一顶他喜欢的帽子，确保每个人戴的帽子跟别人都不一样，并返回方案数。

由于答案可能很大，请返回它对 10^9 + 7 取余后的结果。

 



示例 1：


输入：hats = [[3,4],[4,5],[5]]

输出：1

解释：给定条件下只有一种方法选择帽子。
第一个人选择帽子 3，第二个人选择帽子 4，最后一个人选择帽子 5。


示例 2：


输入：hats = [[3,5,1],[3,5]]

输出：4

解释：总共有 4 种安排帽子的方法：
(3,5)，(5,3)，(1,3) 和 (1,5)


示例 3：


输入：hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]

输出：24

解释：每个人都可以从编号为 1 到 4 的帽子中选。
(1,2,3,4) 4 个帽子的排列方案数为 24 。


示例 4：


输入：hats = [[1,2,3],[2,3,5,6],[1,3,7,9],[1,8,9],[2,5,7]]

输出：111



解题思路：
动态规划，dpMap[41][1024]
1~40表示帽子，
0~1023表示带帽情况，例如5的二进制表示为101，表示第1、3个人带帽，第2个人没带帽


public int numberWays(List<List<Integer>> hats) {
    	int MOD=1000000007;
    	int member=hats.size();//人数
    	long[][] dpMap=new long[41][1<<member];//2^10，表示10位二进制数，每位表示是否带帽
    	int[] hat=new int[41];//下标为帽子，数的位数表示哪些人可以匹配这顶帽子
    	for(int i=0;i<member;i++){
    		List<Integer> temp=hats.get(i);
    		for(int j=0,type=temp.size();j<type;j++){
    			hat[temp.get(j)]|=(1<<i);//将第i位置为1
    		}
    	}
    	
    	System.out.println(Arrays.toString(hat));
    	
    	for(int i=0;i<=40;i++){
    		dpMap[i][0]=1;
    	}
    	for(int i=1;i<41;i++){
    		for(int j=(1<<member)-1;j>=0;j--){
    			for(int k=0;k<member;k++){
    				if((hat[i]&(1<<k))>0){//第k位可以匹配
    					if((j&(1<<k))==0){//第k位没有带帽
							int next=j|(1<<k);//将第i顶帽子分给k
							dpMap[i][next]+=dpMap[i-1][j];
							dpMap[i][next]%=MOD;
						}else{
							dpMap[i][j]=dpMap[i-1][j];
						}
    				}else{
    					dpMap[i][j]=dpMap[i-1][j];
    				}
    			}

    		}
    	}
    	for(int i=0;i<=40;i++){
    		System.out.println(Arrays.toString(dpMap[i]));
    	}
    	return (int)dpMap[40][(1<<member)-1]%MOD;
    }